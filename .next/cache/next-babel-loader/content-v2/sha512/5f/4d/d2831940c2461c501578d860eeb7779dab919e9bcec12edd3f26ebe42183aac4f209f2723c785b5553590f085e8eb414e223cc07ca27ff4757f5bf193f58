{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/hassaan/syed/work/mywork/ibarber/ibarber-frontend/components/Autocomplete/AutoCompleteBox.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fetch from 'cross-fetch';\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction sleep() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new Promise(function (resolve) {\n    setTimeout(resolve, delay);\n  });\n}\n\nvar AutoCompleteBox = function AutoCompleteBox() {\n  _s();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      options = _React$useState4[0],\n      setOptions = _React$useState4[1];\n\n  var loading = open && options.length === 0;\n  React.useEffect(function () {\n    var active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, countries;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('https://country.register.gov.uk/records.json?page-size=5000');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return sleep(1e3);\n\n            case 5:\n              _context.next = 7;\n              return response.json();\n\n            case 7:\n              countries = _context.sent;\n\n              if (active) {\n                setOptions(Object.keys(countries).map(function (key) {\n                  return countries[key].item[0];\n                }));\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      active = false;\n    };\n  }, [loading]);\n  React.useEffect(function () {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"asynchronous-demo\",\n    style: {\n      width: '100%'\n    },\n    open: open,\n    onOpen: function onOpen() {\n      setOpen(true);\n    },\n    onClose: function onClose() {\n      setOpen(false);\n    },\n    getOptionSelected: function getOptionSelected(option, value) {\n      return option.name === value.name;\n    },\n    getOptionLabel: function getOptionLabel(option) {\n      return option.name;\n    },\n    options: options,\n    loading: loading,\n    renderInput: function renderInput(params) {\n      return /*#__PURE__*/_jsxDEV(TextField, _objectSpread(_objectSpread({}, params), {}, {\n        label: \"Asynchronous\",\n        variant: \"standard\",\n        InputProps: _objectSpread(_objectSpread({}, params.InputProps), {}, {\n          endAdornment: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              color: \"inherit\",\n              size: 20\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 28\n            }, _this) : null, params.InputProps.endAdornment]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, _this)\n        })\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(AutoCompleteBox, \"NAnsH/wQUpBOztFs1nPXEavBw+I=\");\n\n_c = AutoCompleteBox;\nexport default AutoCompleteBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoCompleteBox\");","map":{"version":3,"sources":["/home/hassaan/syed/work/mywork/ibarber/ibarber-frontend/components/Autocomplete/AutoCompleteBox.js"],"names":["fetch","React","TextField","Autocomplete","CircularProgress","sleep","delay","Promise","resolve","setTimeout","AutoCompleteBox","useState","open","setOpen","options","setOptions","loading","length","useEffect","active","undefined","response","json","countries","Object","keys","map","key","item","width","option","value","name","params","InputProps","endAdornment"],"mappings":"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","sourcesContent":["import fetch from 'cross-fetch';\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction sleep(delay = 0) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, delay);\n  });\n}\n\nconst AutoCompleteBox = ()=> {\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState([]);\n  const loading = open && options.length === 0;\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!loading) {\n      return undefined;\n    }\n\n    (async () => {\n      const response = await fetch('https://country.register.gov.uk/records.json?page-size=5000');\n      await sleep(1e3); // For demo purposes.\n      const countries = await response.json();\n\n      if (active) {\n        setOptions(Object.keys(countries).map((key) => countries[key].item[0]));\n      }\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [loading]);\n\n  React.useEffect(() => {\n    if (!open) {\n      setOptions([]);\n    }\n  }, [open]);\n\n  return (\n    <Autocomplete\n      id=\"asynchronous-demo\"\n      style={{ width: '100%' }}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      getOptionSelected={(option, value) => option.name === value.name}\n      getOptionLabel={(option) => option.name}\n      options={options}\n      loading={loading}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          label=\"Asynchronous\"\n          variant=\"standard\"\n          InputProps={{\n            ...params.InputProps,\n  \n            endAdornment: (\n              <React.Fragment>\n                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                {params.InputProps.endAdornment}\n              </React.Fragment>\n            ),\n          }}\n        />\n      )}\n    />\n  );\n}\n\nexport default AutoCompleteBox;\n"]},"metadata":{},"sourceType":"module"}